#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4wide
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Animating Algorithms: Project Specification
\layout Author

Steven Cooper (
\family typewriter 
sjc209
\family default 
), Graham Le Page (
\family typewriter 
gpl26
\family default 
),
\newline 
Zhan Li (
\family typewriter 
zrll2
\family default 
), Robert McQueen (
\family typewriter 
ram48
\family default 
),
\newline 
Andrew Medworth (
\family typewriter 
am502
\family default 
), Neofytos Mylona (
\family typewriter 
nm314
\family default 
),
\newline 
Sidath Senanayake (
\family typewriter 
sas58
\family default 
), Alan Treanor (
\family typewriter 
ajit2
\family default 
)
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Introduction
\layout Standard

This is the specification document for the 
\begin_inset Quotes eld
\end_inset 

Animating Algorithms
\begin_inset Quotes erd
\end_inset 

 (Topic 8.5) Computer Science Tripos Part IB / Part II (General) group project.
 The authors are the members of group 
\begin_inset Quotes eld
\end_inset 

Alpha
\begin_inset Quotes erd
\end_inset 

, listed individually above
\begin_inset Foot
collapsed true

\layout Standard

To obtain group members' email addresses, simply append 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
\series bold 
@cam.ac.uk
\family default 
\series default 

\begin_inset Quotes erd
\end_inset 

 to the usernames in brackets after each person's name.
\end_inset 

.
 This project is being overseen by Steven Hand (
\family typewriter 
\series bold 
smh22@cam.ac.uk
\family default 
\series default 
).
\layout Section

Background
\layout Standard

The field of algorithms and data structures is one of the hardest parts
 of Computer Science to teach.
 When done on blackboards or overhead projectors, diagrams can get extremely
 messy and hard to follow; even when the steps of an algorithm are clearly
 displayed on paper, it is not always immediately clear what operations
 have been done between each step.
\layout Standard

Computer animation would be an ideal way to demonstrate algorithms: the
 actions taken by the computer at each stage can be clearly demonstrated
 at whatever level of abstraction is most helpful.
 Users could move through an algorithm's execution at their own speed, going
 especially slowly over difficult steps.
 Critical information can be shown in a clear, intuitive way using colour
 coding, and this can be reinforced with clean, smooth graphical animations
 which show exactly what is going on internally as the algorithm is executed.
 The cost of the algorithm in time and space on different sizes of input
 could also be clearly displayed.
\layout Standard

Clearly, a system to animate any conceivable algorithm working on any imaginable
 data structure is well beyond the scope of a six-week project, but we believe
 it should be possible to provide an extensible system with animation primitives
 enabling the illustration of algorithms which operate on vectors and lists
 (for example sorting, searching and heap algorithms) or graphs (for example
 shortest-path and strongly-connected component finding algorithms) within
 the available time.
\layout Section

Assumptions
\layout Itemize

The 
\begin_inset Quotes eld
\end_inset 

animation script
\begin_inset Quotes erd
\end_inset 

 and the algorithms themselves will be written in Java; we will not implement
 our own special language for describing algorithms.
\layout Itemize

The user will be able to specify initial data in the following ways:
\begin_deeper 
\layout Itemize

For 
\emph on 
vectors
\emph default 
: the size of the initial array (up to a maximum of 20 elements), and the
 initial contents of each cell (which must be 
\family typewriter 
int
\family default 
s: there is no need to demonstrate algorithms on multiple data types).
 There will be no option to invert the ordering, as this will not aid understand
ing of the algorithm.
\layout Itemize

For 
\emph on 
graphs
\emph default 
: the ability to specify the number of nodes (up to a maximum of 10), and
 input the elements of the connectivity matrix (which must all be integers).
\end_deeper 
\layout Itemize

The user will set the input data once, before the animation starts, and
 after that time he/she will not be able to alter the data without starting
 again.
\layout Itemize

The auxiliary displays showing the time and space costs of the algorithm,
 and the steps and explanation of its behaviour, will be implemented (if
 time permits) with a series of textual messages displayed to the user as
 the algorithm is animated.
\layout Section

Facilities to be provided
\layout Standard

There are some facilities that the system will be useless without, and whose
 implementation is therefore essential.
 There are others, however, which are not crucial but will usefully extend
 its functionality.
 These facilities will be considered optional and may or may not be implemented,
 subject to time constraints.
\layout Paragraph

Essential facilities
\layout Itemize

Support for algorithms on vectors and graphs
\layout Itemize

Clear and smooth graphical animation
\layout Itemize

Ability to step through algorithms, both forwards and backwards, at the
 click of a mouse
\layout Itemize

Ability to specify the algorithm's initial data or input (plus the ability
 to generate random initial data and special cases such as all entries in
 a vector being the same)
\layout Itemize

Ability to add new algorithms using existing animation primitives (by writing
 new Java classes using an existing API)
\layout Itemize

Well-documented API for creation of new animation primitives and data structures
, potentially allowing the implementation of different types of algorithm
 from the ones done here (e.g.
 heap management routines)
\layout Itemize

Cross-platform operation using Java
\layout Itemize

User-friendly interface
\layout Itemize

In order to demonstrate the system, we will implement three sorting algorithms
 and two graph algorithms:
\begin_deeper 
\layout Itemize

insertion sort,
\layout Itemize

Quicksort,
\layout Itemize

radix sort,
\layout Itemize

Dijkstra's algorithm (for finding the shortest path between two nodes in
 a graph), and
\layout Itemize

Kruskal's algorithm (for finding the minimum spanning tree of a set of nodes
 in a graph).
\end_deeper 
\layout Paragraph

Optional facilities
\layout Itemize

Ability to vary the animation speed (between two reasonable values)
\layout Itemize

Text explanation of each step as it happens (pseudocode as in a debugger)
\layout Itemize

Display of the time and space costs of the algorithm (in text or graphical
 mode)
\layout Itemize

A graph editor which allows the user to place the nodes on the animation
 canvas, and to specify the edges connecting the nodes using mouse clicks
\layout Itemize

Support for bipartite graphs
\layout Itemize

Implementations of more algorithms, e.g.
 Prim's algorithm, shell sort, strongly connected component finding algorithm
\layout Section

Environment
\layout Itemize

The system will be written in Java 2 using the Eclipse IDE.
\layout Itemize

The GUI will be implemented in the Swing windowing toolkit.
\layout Itemize

Version control will be provided by 
\family typewriter 
cvs
\family default 
: the repository will be located on 
\family typewriter 
ned.ucam.org
\family default 
, a student-operated server located in Corpus Christi College.
\layout Section

Overall system architecture
\layout Standard

The main functionality of the system can be broken down into four areas:
 algorithms, animators, queues, and shell.
 Each will be represented as a package in Java.
 The following sections contain a brief description of each package, the
 classes within, and their interactions.
\layout Subsection

Algorithms
\layout Standard


\begin_inset Float figure
placement tbp
wide false
collapsed false

\layout Standard
\added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename PackageAlgorithm.eps
	scale 50
	BoundingBox 0bp 0bp 740bp 380bp
	clip

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{figure:UML-Class-Algorithm}

\end_inset 

UML Class diagram for package 
\family typewriter 
Algorithm
\end_inset 


\layout Standard

The classes within this package will ultimately implement the algorithms
 which the system is to animate: they will contain the instructions to the
 other parts of the program for animating the steps that are taken by the
 algorithm, provide the narrative for explaining to the user what is happening,
 and any other information which is displayed.
\layout Standard

The class hierarchy for this package can be seen in Figure\SpecialChar ~

\begin_inset LatexCommand \ref{figure:UML-Class-Algorithm}

\end_inset 

.
 The abstract class 
\family typewriter 
Algorithm
\family default 
 is the parent class for all of the classes within this package, and an
 abstract class is descended from it for each group of algorithms which
 are being implemented.
 We will implement two types of algorithm, 
\family typewriter 
GraphAlgorithm
\family default 
 and 
\family typewriter 
VectorAlgorithm
\family default 
.
 These abstract classes will specify methods for querying information about
 the algorithm, such as its name and description, as well as setting the
 initial data for the algorithm and instructing it to execute.
\layout Subsection

Animators
\layout Standard


\begin_inset Float figure
placement tbp
wide false
collapsed false

\layout Standard
\added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename PackageAnimatorQueue.eps
	scale 50

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{figure:UML-Class-AnimatorQueue}

\end_inset 

UML Class diagram for packages 
\family typewriter 
Animator
\family default 
 and 
\family typewriter 
Queue
\end_inset 


\layout Standard

The UML class diagram for this package can be seen in Figure\SpecialChar ~

\begin_inset LatexCommand \ref{figure:UML-Class-AnimatorQueue}

\end_inset 

.
 It contains a set of abstract classes descended from 
\family typewriter 
Animator
\family default 
 which have methods and inner classes to specify the animation primitives
 necessary for each group of algorithms.
 There will initially be two classes, 
\family typewriter 
GraphAnimator
\family default 
 and 
\family typewriter 
VectorAnimator
\family default 
, which will specify the methods necessary for the animation primitives
 required for animating graph and vector algorithms.
\layout Subsection

Queues
\layout Standard

The class hierarchy for this package can also be seen in Figure\SpecialChar ~

\begin_inset LatexCommand \ref{figure:UML-Class-AnimatorQueue}

\end_inset 

.
 It contains an interface
\family typewriter 
 AnimatorQueue
\family default 
, initially implemented by two classes 
\family typewriter 
GraphQueue
\family default 
 and 
\family typewriter 
VectorQueue
\family default 
, which extend their respective 
\family typewriter 
Animator
\family default 
 classes (from the Animators package).
 The queues form a layer of abstraction between the algorithms and the actual
 implementation of the animators, and allow the algorithms to run to completion
 before any animation is shown to the user.
 When the algorithm uses an animator primitive, the queue internally records
 the requested action, and returns control to the algorithm.
\layout Standard

Every so often the algorithm will call a special animation primitive which
 signals a 
\emph on 
checkpoint.
 
\emph default 
These checkpoints are the junctures at which the animation will pause and
 the user will have the opportunity to go forward or back --- essentially,
 each sequence of animation primitives between checkpoints constitutes one
 step of the algorithm.
 For example, if we were implementing insertion sort, one step might consist
 of the insertion of a single value into the vector: we might want to move
 a pointer along the vector until we find the correct place for the value,
 move all the other data items up to make room, and insert the value.
\layout Standard

As the algorithm progresses, the queue builds up a list of all of the animator
 primitives which the algorithm used to get between one checkpointed state
 of the animator and the next.
 The shell can then provide the queue with an actual implementation of the
 animator primitives, and use the 
\family typewriter 
AnimatorQueue
\family default 
 interface to instruct the queue to execute each batch of queued primitives
 in sequence on the actual animator.
\layout Standard

The more important functionality of this package is that, at each checkpoint,
 it stores the state of the animation canvas and the data structures on
 which the algorithm is operating.
 This will allow the user to roll the animator back to previous states so
 the user can revisit previous steps of the algorithm, and the queue retains
 the steps that need to be done to return the animator to subsequent states.
 There will be methods in the 
\family typewriter 
AnimatorQueue
\family default 
 interface available to the shell which will cause the animation to move
 forwards and backwards between checkpoints.
 To move backwards, the state of the canvas and data structures at the previous
 checkpoint will be restored, and the queue's internal structures will be
 updated accordingly.
 To move forwards, the next animation primitives will be executed in sequence
 until the next checkpoint is reached.
\layout Standard

It should be noted that it would not be possible to skip forwards to the
 next checkpoint (without animation) unless the user has gone backwards
 and then forwards again, because the state of the animation canvas will
 not exist yet in this case.
 It would be easier to implement the same basic functionality by simply
 giving the user the ability to change the animation speed instead (a facility
 which is on the 
\begin_inset Quotes eld
\end_inset 

optional
\begin_inset Quotes erd
\end_inset 

 list).
 There could be a button which temporarily sets the animation speed to infinity
 until the next checkpoint, for example.
\layout Subsection

Shell
\layout Standard

The shell package contains classes which provide the user interface, along
 with the visible elements of the system (such as the actual animation canvas).
 The implementations of the 
\family typewriter 
GraphAnimator
\family default 
 and 
\family typewriter 
VectorAnimator
\family default 
 abstract classes are here (called 
\family typewriter 
ActualGraphAnimator
\family default 
 and 
\family typewriter 
ActualVectorAnimator
\family default 
 respectively), along with a 
\family typewriter 
Shell
\family default 
 class which contains the entry point for the whole system and controls
 the main program flow.
\layout Standard

The shell can investigate the algorithm package (via introspection) to see
 which classes are available, and present a list of algorithms for the user
 to choose from.
 When an algorithm is selected, the shell will allow the user to input the
 initial data for the algorithm, or generate some at random.
 The shell then creates an instance of the appropriate animator, wraps this
 in the appropriate queue class, and passes this to the algorithm, which
 is then run to completion.
 The shell then displays the animator on screen, steps through the algorithm's
 stages as the user requests them (using the 
\family typewriter 
AnimatorQueue
\family default 
 interface), shows any explanatory text provided by the algorithm, and shows
 which step is active.
 The shell will either advance the animation at a preset speed, or the user
 can step forwards and backwards through the stages manually.
 After an animation has run to completion, the user can return to the initial
 screen and choose a new algorithm or exit.
\layout Standard

To clarify the way data moves around the system (and how control is transferred)
, see Figure\SpecialChar ~

\begin_inset LatexCommand \ref{figure:Data-Flow}

\end_inset 

.
\layout Standard


\begin_inset Float figure
placement tbp
wide false
collapsed false

\layout Standard
\added_space_top smallskip \added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename DataFlow.eps
	scale 50

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{figure:Data-Flow}

\end_inset 

System data flow diagram
\end_inset 


\layout Section

Overall inputs, functions, and outputs
\layout Subsubsection*

User inputs
\layout Itemize

Algorithm selection (from the ones implemented)
\layout Itemize

Initial data (keyboard input for vector elements, graph edge costs) including
 ability to generate random data and special cases (such as already sorted
 data)
\layout Itemize

Navigation through algorithm using buttons
\layout Itemize

Animation speed 
\emph on 
[optional]
\layout Itemize

Graph node locations and other layout information (using mouse, in graph
 editor) 
\emph on 
[optional]
\layout Subsubsection*

Functions
\layout Itemize

Simulate algorithm using given initial data, storing the state at each stage
 to facilitate forward and backward movement, plus information displays
 such as time and space cost
\layout Itemize

Animate each step in the algorithm when the user moves forward
\layout Subsubsection*

Outputs
\layout Itemize

Animation displayed on screen
\layout Itemize

Time and space cost display 
\emph on 
[optional]
\layout Itemize

Pseudocode 
\emph on 
[optional]
\layout Section

Specification of Components and Test Requirements
\layout Subsection

Algorithms
\layout Subsubsection*

Purpose
\layout Standard

Each algorithm class implements a certain algorithm which can be displayed
 to the user, as well as including the code to animate and explain this
 algorithm to the user as it executes.
\layout Subsubsection*

Inputs
\layout Standard

The algorithm recieves its initial data, and an instance of an object which
 extends the 
\family typewriter 
Animator
\family default 
 appropriate to the class of algorithm.
 For example, a sort algorithm could recieve a vector of integers, and an
 instance of a 
\family typewriter 
VectorAnimator
\family default 
 class.
\layout Subsubsection*

Outputs
\layout Standard

When executed, the algorithm makes a sequence of method calls on the provided
 object which extends its appropriate 
\family typewriter 
Animator
\family default 
 abstract class.
 These method calls represent the sequence of steps necessary to present
 an explanation to the user of the execution of the algorithm.
\layout Subsubsection*

Public Methods
\layout Itemize


\family typewriter 
\emph on 
static
\emph default 
 String getName()
\layout Itemize


\family typewriter 
\emph on 
static
\emph default 
 String getDescription()
\layout Itemize


\family typewriter 
void setAnimator(Animator)
\layout Itemize


\family typewriter 
void setData(...)
\layout Itemize


\family typewriter 
void execute()
\layout Subsubsection*

Testing
\layout Standard

Each algorithm can be tested indepdently of the main system by making a
 test program that provides a 
\family typewriter 
TestAnimator
\family default 
 class, which rather than queueing or animating, implements stub functions
 to merely display the sequence of method calls which were made by the algorithm.
 The program can then run the algorithm on a variety of possible inputs
 to ensure that the correct results are generated, even in extreme cases
 such as a vector full of 
\family typewriter 
0
\family default 
s.
\layout Subsection

Animators
\layout Subsubsection*

Purpose
\layout Standard

The animator abstract classes define all of the methods which are available
 for the algorithms to call.
 All of the necessary animation primitives are included in these abstract
 classes, which are implemented by classes in the queue and shell packages,
 for queueing and actually displaying the animation events respectively.
 The initial implementation will include two 
\family typewriter 
Animator
\family default 
 classes for graph and vector animation primitives.
 Actual drawing implementations of these abstract classes must support the
 ability to save their state to an opaque 
\family typewriter 
Checkpoint
\family default 
 object which can be later used to restore the animator to a previous state,
 using the memento design pattern.
\layout Subsubsection*

Public Methods (
\family typewriter 
Animator
\family default 
)
\layout Itemize


\family typewriter 
void setSteps(String[])
\family default 
 --- define a series of strings to explain what the algorithm does
\layout Itemize


\family typewriter 
void setCurrentStep(int)
\family default 
 --- highlight currently active step
\layout Itemize


\family typewriter 
void showMessage(String)
\family default 
 --- show text to user to explain current actions
\layout Itemize


\family typewriter 
Checkpoint saveState()
\family default 
 --- save the state of the animator so this stage of the algorithm can be
 returned to later when required
\layout Itemize


\family typewriter 
void restoreState(Checkpoint)
\family default 
 --- return the animator to the state it was in when a given checkpoint
 was taken
\layout Subsubsection*

Public Methods (
\family typewriter 
GraphAnimator
\family default 
)
\layout Itemize

Create graph (specify nodes and paths with costs and labels)
\layout Paragraph

Node
\layout Itemize

Change node label
\layout Itemize

Highlight node (to indicate current focus of algorithm)
\layout Itemize

Shade node (to indicate membership of a set of nodes or paths)
\layout Paragraph

Path (joins two nodes)
\layout Itemize

Change path label
\layout Itemize

Highlight path (to indicate current focus of algorithm)
\layout Itemize

Shade path (to indicate membership of a set of nodes or paths)
\layout Subsubsection*

Public Methods (
\family typewriter 
VectorAnimator
\family default 
)
\layout Itemize

Create vector (with initial data and label)
\layout Paragraph

Vector (array of numbers)
\layout Itemize

Change vector label
\layout Itemize

Swap elements at two pointers
\layout Itemize

Copy element from one ponter to another
\layout Itemize

Delete element at pointer
\layout Itemize

Insert element at marker
\layout Itemize

Split vector into two at a marker (for Quicksort)
\layout Itemize

Highlight columns of the vector (for Radix sort)
\layout Paragraph

Marker (points at a boundary between two entries in the vector)
\layout Itemize

Create marker (with label and position)
\layout Itemize

Delete marker
\layout Itemize

Change marker label
\layout Itemize

Move marker
\layout Itemize

Highlight marker (to indicate current focus of algorithm)
\layout Paragraph

Pointer (points at a specific entry in the vector)
\layout Itemize

Create pointer (with label and position)
\layout Itemize

Delete pointer
\layout Itemize

Change pointer label
\layout Itemize

Move pointer
\layout Itemize

Highlight pointer (to indicate current focus of algorithm)
\layout Subsection

Queues
\layout Subsubsection*

Purpose
\layout Subsubsection*

Inputs
\layout Subsubsection*

Outputs
\layout Subsubsection*

Public Methods
\layout Subsubsection*

Testing
\layout Subsection

Shell
\layout Subsubsection*

Purpose
\layout Standard

The shell is a collection of classes that contain all of the code to implement
 the interface that the user interacts with.
 The shell allows the user to choose an algorithm and input or generate
 data, and then uses classes from the other packages which run the relevant
 algorithm and queue the animation primitives.
 The shell also contains the classes to finally render output to the display,
 which are extended from the abstract 
\family typewriter 
Animator
\family default 
 subclasses.
 These animators will implement an internal interface which allows the shell
 to control playback speed, pausing, etc, independently of which type of
 animation is being implemented.
\layout Subsubsection*

Inputs
\layout Standard

The shell will accept two main areas of initial input, the algorithm choice,
 and the provision of data for the algorithm.
 When the animation has been prepared and being presented, a series of animation
 playback options such as previous, next, play and pause will be provided
 to the user.
 The shell can also make use of Java introspection to enumerate the available
 algorithms within the algorithm package, and use this to present the list
 to the user.
\layout Subsubsection*

Outputs
\layout Standard

As a graphical component, the shell produces all of its output on screen,
 but this can be broken down into two categories.
 One is interaction whilst the user selects an algorithm and enters data,
 and the other is the actual display of the animation on screen.
\layout Subsubsection*

Public Methods
\layout Itemize


\family typewriter 
\emph on 
public static 
\emph default 
void main(String[])
\family default 
 --- the entry point of the entire system
\layout Subsubsection*

Testing
\layout Standard

Testing is to be broken down into two sections to mirror the two functions
 of the shell.
 For algorithm selection and data entry, the functionality of the relevant
 Swing components will be tested with algorithms containing stub functions
 to verify that the right method calls are being made.
 In addition, the shell's ability to cope with invalid user data (such as
 entering a string into a vector of numbers) will be tested.
 To test the animation section, further test algorithms will be created
 which call methods to test all of the animation primitives and combinations
 thereof, to ensure the display is correctly updated and that user interaction
 or interruption during animations (such as clicking previous, next or pause)
 is handled appropriately.
\layout Section

Final acceptance criteria
\layout Itemize

The system must allow a user to pick an algorithm from a selection of at
 least five, where there must be at least two different types of algorithm;
\layout Itemize

the system must allow a user to input data to be used with the selected
 algorithm;
\layout Itemize

the system must compute each step of the algorithm correctly using the data
 it receives;
\layout Itemize

the system must animate each step of the algorithm on the screen, allowing
 the user to review each step individually and move forwards and backwards
 at will (the system 
\emph on 
must
\emph default 
 allow the user to repeat animations, not just flick back and forth between
 states);
\layout Itemize

the user documentation must explain how to use the system as it is currently
 implemented;
\layout Itemize

the developer documentation must explain how to use the APIs provided to
 extend the system with new algorithms and animations.
\layout Section

Division of tasks
\layout Standard

The division of tasks is described in Table 
\begin_inset LatexCommand \ref{table:division-of-tasks}

\end_inset 

.
 Group members with 
\emph on 
(backup)
\emph default 
 written next to their names will be called upon to perform that task in
 the event that the others cannot complete it on their own, or extra effort
 is needed.
\layout Standard


\begin_inset Float table
placement tbp
wide false
collapsed false

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Manager
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Graham Le Page
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Librarian
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Robert McQueen
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Secretary
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Andrew Medworth
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
User documentation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Neofytos Mylona
\layout Standard


\family sans 
Graham Le Page
\layout Standard


\family sans 
Alan Treanor
\layout Standard


\family sans 
Andrew Medworth 
\emph on 
(backup)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Design & Coding
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Robert McQueen
\layout Standard


\family sans 
Steven Cooper
\layout Standard


\family sans 
Andrew Medworth
\layout Standard


\family sans 
Sidath Senanayake
\layout Standard


\family sans 
Zhan Li 
\emph on 
(backup)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Troubleshooting & Testing
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
Zhan Li
\layout Standard


\family sans 
Alan Treanor
\layout Standard


\family sans 
Sidath Senanayake 
\emph on 
(backup)
\layout Standard


\family sans 
\emph on 
As many others as are required
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{table:division-of-tasks}

\end_inset 

Division of project tasks
\end_inset 


\the_end
