#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4wide
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Animating Algorithms: Project Specification
\layout Author

Steven Cooper (
\family typewriter 
sjc209
\family default 
), Graham Le Page (
\family typewriter 
gpl26
\family default 
),
\newline 
Zhan Li (
\family typewriter 
zrll2
\family default 
), Robert McQueen (
\family typewriter 
ram48
\family default 
),
\newline 
Andrew Medworth (
\family typewriter 
am502
\family default 
), Neofytos Mylona (
\family typewriter 
nm314
\family default 
),
\newline 
Sidath Senanayake (
\family typewriter 
sas58
\family default 
), Alan Treanor (
\family typewriter 
ajit2
\family default 
)
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Introduction
\layout Standard

This is the specification document for the 
\begin_inset Quotes eld
\end_inset 

Animating Algorithms
\begin_inset Quotes erd
\end_inset 

 (Topic 8.5) Computer Science Tripos Part IB / Part II (General) group project.
 The authors are the members of group 
\begin_inset Quotes eld
\end_inset 

Alpha
\begin_inset Quotes erd
\end_inset 

, listed individually above
\begin_inset Foot
collapsed true

\layout Standard

To obtain group members' email addresses, simply append 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
\series bold 
@cam.ac.uk
\family default 
\series default 

\begin_inset Quotes erd
\end_inset 

 to the usernames in brackets after each person's name.
\end_inset 

.
 This project is being overseen by Steven Hand (
\family typewriter 
\series bold 
smh22@cam.ac.uk
\family default 
\series default 
).
\layout Section

Background
\layout Standard

The field of algorithms and data structures is one of the hardest parts
 of Computer Science to teach.
 When done on blackboards or overhead projectors, diagrams can get extremely
 messy and hard to follow; even when the steps of an algorithm are clearly
 displayed on paper, it is not always immediately clear what operations
 have been done between each step.
\layout Standard

Computer animation would be an ideal way to demonstrate algorithms: the
 actions taken by the computer at each stage can be clearly demonstrated
 at whatever level of abstraction is most helpful.
 Users could move through an algorithm's execution at their own speed, going
 especially slowly over difficult steps.
 Critical information can be shown in a clear, intuitive way using colour
 coding, and this can be reinforced with clean, smooth graphical animations
 which show exactly what is going on internally as the algorithm is executed.
 The cost of the algorithm in time and space on different sizes of input
 could also be clearly displayed.
\layout Standard

Clearly, a system to animate any conceivable algorithm working on any imaginable
 data structure is well beyond the scope of a six-week project, but we believe
 it should be possible to provide an extensible system with animation primitives
 enabling the illustration of algorithms which operate on vectors and lists
 (for example sorting, searching and heap algorithms) or graphs (for example
 shortest-path and strongly-connected component finding algorithms) within
 the available time.
\layout Section

Assumptions
\layout Standard

[?write this up as proper writing not bullet points?]
\layout Itemize

The 
\begin_inset Quotes eld
\end_inset 

animation script
\begin_inset Quotes erd
\end_inset 

 and the algorithms themselves will be written in Java; we will not implement
 our own special language for describing algorithms.
 
\layout Itemize

The user will be able to specify initial data in the following ways:
\begin_deeper 
\layout Itemize

For 
\emph on 
vectors
\emph default 
: the size of the initial array (up to a maximum of 20 elements), and the
 initial contents of each cell (which must be 
\family typewriter 
int
\family default 
s: there is no need to demonstrate algorithms on multiple data types).
 There will be no option to invert the ordering, as this will not aid understand
ing of the algorithm.
\layout Itemize

For 
\emph on 
graphs
\emph default 
: the ability to specify the number of nodes (up to a maximum of 10), and
 input the elements of the connectivity matrix (which must all be integers).
\end_deeper 
\layout Itemize

The user will set the input data once, before the animation starts, and
 after that time he/she will not be able to alter the data without starting
 again.
\layout Itemize

The auxiliary displays showing the time and space costs of the algorithm,
 and the steps and explanation of its behaviour, will be implemented with
 a series of textual messages displayed to the user as the algorithm is
 animated.
\layout Section

Facilities to be provided
\layout Standard

There will be some facilities that the system will need to provide.
 Other facilities are optional, as they are not essential to the system
 but will either extend its functionality or add additional features.
 These facilities may or may not be implemented, subject to time constraints.
\newline 

\newline 
The following facilities will definitely be implemented:
\layout Itemize

Support for algorithms on vectors, lists and graphs
\layout Itemize

Neat, non-flickering graphical animation
\layout Itemize

Ability to step through algorithms, both forwards and backwards, at user's
 speed
\layout Itemize

Ability to specify initial data / input (plus ability to generate random
 initial data and special cases such as all entries in a vector being the
 same)
\layout Itemize

Ability to add new algorithms using existing animation primitives
\layout Itemize

Well-documented API for creation of new animation primitives and data structures
, potentially allowing the implementation of different types of algorithm
 from the ones done here
\layout Itemize

Cross-platform operation using Java
\layout Itemize

Easy-to-use, user-friendly interface 
\layout Itemize

We will be demonstrating the system by implementing the following algorithms:
 insertion sort, Quicksort, radix sort, Dijkstra's algorithm (for finding
 the shortest path between two nodes in a graph), and Kruskal's algorithm
 (for finding the minimum spanning tree of a set of nodes in a graph).
\layout Standard

The following facilities will optionally be implemented:
\layout Itemize

Ability to vary animation speed (between two reasonable values)
\layout Itemize

Text explanation of each step as it happens (pseudocode as in a debugger)
\layout Itemize

Display of the time and space costs of the algorithm (in text or graphical
 mode)
\layout Itemize

A graph editor which allows the user to place the nodes on the animation
 canvas, and to specify the edges connecting the nodes using mouse clicks
\layout Itemize

Support for bipartite graphs
\layout Itemize

Implementations of more algorithms, e.g.
 Prim's algorithm, shell sort, strongly connected component finding algorithm
\layout Section

Environment
\layout Standard

Based on our current knowledge and the availability of development tools,
 we have decided that:
\layout Itemize

The system will be written in Java 2 using the Eclipse IDE.
\layout Itemize

The GUI will be implemented in the Swing windowing toolkit.
\layout Itemize

Program testing will be done using JUnit, integrated into the Eclipse platform
 as a plugin.
\layout Itemize

Version control will be provided by 
\family typewriter 
cvs
\family default 
.
\layout Section

Overall system architecture
\layout Standard

The main functionality of the system can be broken down into four areas:
 algorithms, animators, queues, and shell.
 Each will be represented as a package in Java.
 The following sections contain a brief description of each package, the
 classes within, and their interactions.
\layout Subsection

Algorithms
\layout Standard


\begin_inset Float figure
placement p
wide false
collapsed false

\layout Standard
\added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename PackageAlgorithm.eps
	scale 50
	BoundingBox 0bp 0bp 740bp 380bp
	clip

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{figure:UML-Class-Algorithm}

\end_inset 

UML Class diagram for package 
\family typewriter 
Algorithm
\end_inset 


\layout Standard

The classes within this package will ultimately implement the algorithms
 which the system is able to demonstrate, contain the instructions to the
 other parts of the program for animating the steps that are taken by the
 algorithm, provide the narrative for explaining to the user what is happening,
 and any other information which is displayed.
\layout Standard

As can be seen from Figure 
\begin_inset LatexCommand \ref{figure:UML-Class-Algorithm}

\end_inset 

, the abstract class 
\family typewriter 
Algorithm
\family default 
 is the parent class for all of the classes within this package, and an
 abstract class is descended from it for each group of algorithms which
 are being implemented.
 The initial specification is to implement two types of algorithm, 
\family typewriter 
GraphAlgorithm
\family default 
 and 
\family typewriter 
SortAlgorithm
\family default 
.
 These abstract classes will specify methods for querying information about
 the algorithm, such as its name, purpose and efficiency, as well as setting
 the initial data for the algorithm and instructing it to execute.
\layout Subsection

Animatorsusing mouse) 
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename PackageAnimatorQueue.eps
	scale 50

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{figure:UML-Class-AnimatorQueue}

\end_inset 

UML Class diagram for package 
\family typewriter 
Animator
\end_inset 


\layout Standard

This package contains a set of abstract classes descended from 
\family typewriter 
Animator
\family default 
 which have methods and inner classes to specify the animation primitives
 necessary for each group of algorithms.
 There will initially be two classes, 
\family typewriter 
GraphAnimator
\family default 
 and 
\family typewriter 
SortAnimator
\family default 
, which will specify the methods necessary for the following primitives.
 (See Figure 
\begin_inset LatexCommand \ref{figure:UML-Class-AnimatorQueue}

\end_inset 

.)
\layout Subsubsection

Animator Primitives
\layout Itemize

Define steps of algorithm (a series of strings to explain what the algorithm
 does)
\layout Itemize

Highlight currently active step
\layout Itemize

Show text to user (to explain current actions)
\layout Itemize

Checkpoint (save the state of the animator so this stage of the algorithm
 can be returned to)
\layout Subsubsection

Graph Animator Primitives
\layout Itemize

Create graph (specify nodes and paths with costs and labels)
\layout Paragraph

Node
\layout Itemize

Change node label
\layout Itemize

Highlight node (to indicate current focus of algorithm)
\layout Itemize

Shade node (to indicate membership of a set of nodes or paths)
\layout Paragraph

Path (joins two nodes)
\layout Itemize

Change path label
\layout Itemize

Highlight path (to indicate current focus of algorithm)
\layout Itemize

Shade path (to indicate membership of a set of nodes or paths)
\layout Subsubsection

Sort Animator Primitives
\layout Itemize

Create vector (with initial data and label)
\layout Paragraph

Vector (array of numbers)
\layout Itemize

Change vector label
\layout Itemize

Swap elements at two pointers
\layout Itemize

Delete element at pointer
\layout Itemize

Insert element at marker
\layout Itemize

Split vector into two at a marker (for Quicksort)
\layout Paragraph

Marker (points at a boundary between two entries in the vector)
\layout Itemize

Create marker (with label and position)
\layout Itemize

Delete marker
\layout Itemize

Change marker label
\layout Itemize

Move marker
\layout Itemize

Highlight marker (to indicate current focus of algorithm)
\layout Paragraph

Pointer (points at a specific entry in the vector)
\layout Itemize

Create pointer (with label and position)
\layout Itemize

Delete pointer
\layout Itemize

Change pointer label
\layout Itemize

Move pointer
\layout Itemize

Highlight pointer (to indicate current focus of algorithm)
\layout Subsection

Queues
\layout Standard

This package contains an interface 
\family typewriter 
AnimatorQueue
\family default 
, initially implemented by two classes 
\family typewriter 
GraphQueue
\family default 
 and 
\family typewriter 
SortQueue
\family default 
, which extend their respective 
\family typewriter 
Animator
\family default 
 classes.
 The queues form a layer of abstraction between the algorithms and the actual
 implementation of the animators, and allow the algorithms to run to completion
 before any animation is shown to the user.
 When the algorithm uses an animator primitive, the queue internally records
 the requested action, and returns control to the algorithm.
 The queue hence builds up a list of all of the animator primitives which
 an algorithm used to get between one checkpointed state of the animator
 and the next.
 The shell can then provide an actual implementation of the animator primitives
 to the queue, and use the 
\family typewriter 
AnimatorQueue
\family default 
 interface to instruct the queue to execute each batch of queued primitives
 on the actual animator.
 The more important functionality of this package is that it also allows
 the user to roll the animator back to previous states so the user can revisit
 previous steps of the algorithm, and the queue retains the steps that need
 to be done to return the animator to subsequent states.
 In this way, next and previous methods in the 
\family typewriter 
AnimatorQueue
\family default 
 interface are available to the shell.
\layout Subsection

Shell
\layout Standard


\begin_inset Float figure
placement p
wide false
collapsed false

\layout Standard
\added_space_bottom smallskip \align center 

\begin_inset Graphics
	filename PackageShell.eps
	scale 50

\end_inset 


\layout Caption

UML Class diagram for package 
\family typewriter 
Shell
\end_inset 


\layout Standard

The shell package implements the interface that is visible to the user.
 The actual implementations of the 
\family typewriter 
GraphAnimator
\family default 
 and 
\family typewriter 
SortAnimator
\family default 
 abstract classes are here, as well as a 
\family typewriter 
Shell
\family default 
 class which contains the entry point for the whole system and the controller
 of main program flow.
 The shell can investigate the algorithm package to see which classes are
 available, and present a list of algorithms for the user to choose from.
 When an algorithm is selected, the shell will allow the user to input the
 initial data for the algorithm, or generate some at random.
 The shell then creates instances of the appropriate animator, wrapped in
 the appropriate queue class, which is provided to the algorithm, which
 is then run to completion.
 The shell then displays the animator on screen, will use the 
\family typewriter 
AnimatorQueue
\family default 
 interface to step through the algorithm's stages, animating the requested
 changes, showing the explanation texts provided by the algorithm, and showing
 which step is active.
 The shell will either advance the animation at a preset speed, or the user
 can step forwards and backwards through the stages manually.
 After an animation has run to completion, the user can return to the initial
 screen and choose a new algorithm or exit.
\layout Section

Overall inputs, functions, and outputs
\layout Standard

User inputs:
\layout Itemize

Algorithm selection (from the ones implemented)
\layout Itemize

Initial data (keyboard input for vector elements, graph edge costs) including
 ability to generate random data and special cases (such as already sorted
 data) 
\layout Itemize

Navigation through algorithm using buttons
\layout Itemize

Animation speed 
\emph on 
[optional]
\layout Itemize

Graph node locations and other layout information (using mouse, in graph
 editor) 
\emph on 
[optional]
\layout Standard

Functions:
\layout Itemize

Simulate algorithm using given initial data, storing the state at each stage
 to facilitate forward and backward movement, plus information displays
 such as time and space cost
\layout Itemize

Animate each step in the algorithm when the user moves forward
\layout Standard

Outputs:
\layout Itemize

Animation displayed on screen
\layout Itemize

Time and space cost display 
\emph on 
[optional]
\layout Itemize

Pseudocode 
\emph on 
[optional]
\layout Section

Specification of Components and Test Requirements
\layout Standard

For each major class in the system:
\layout Itemize

Its purpose, including what functionality is it supposed to provide to the
 user or to other classes
\layout Itemize

Its inputs
\layout Itemize

Its outputs
\layout Itemize

Its major public methods (replicating some of the stuff in the abstract
 class listings)
\layout Itemize

How it should be tested
\layout Subsection

User interface / shell
\layout Subsection

Actual animator
\layout Subsection

Animation queuer thingy
\layout Standard

We will be implementing the following animation primitives for vectors:
\layout Itemize

Create new vector
\layout Itemize

Yadda
\layout Standard

We will be implementing the following animation primitives for graphs:
\layout Itemize

Yodda
\layout Itemize

Yudda
\layout Standard

Test requirements: (move these to appropriate classes)
\layout Itemize

make sure algorithms work correctly and produce the right result in all
 circumstances, even when dealing with extreme data eg.
 all 0's
\layout Itemize

make sure valid inputs are dealt with sensibly
\layout Itemize

make sure invalid (i.e.
 non-integers in vectors) inputs are dealt with sensibly
\layout Itemize

make sure the display shows the correct information at each step
\layout Itemize

make sure the next/back buttons work, eg.
 what happens if they are pressed during animations
\layout Itemize

make sure the graphical user interface works correctly
\layout Subsection

The algorithms themselves
\layout Section

Final Acceptance Criteria
\layout Itemize

The system must allow a user to pick an algorithm from a selection of at
 least five, where there must be at least two different types of algorithm;
\layout Itemize

The system must allow a user to input data to be used with the selected
 algorithm;
\layout Itemize

The system must compute each step of the algorithm correctly using the data
 it receives;
\layout Itemize

The system must animate each step of the algorithm on the screen, at a speed
 chosen by the user;
\layout Itemize

The user documentation must explain how to use the system as it is implemented
 now;
\layout Itemize

The user documentation must explain how to extend the system with new algorithms
 and animations.
\layout Section

Division of tasks
\layout Standard

The division of tasks is described in Table 
\begin_inset LatexCommand \ref{table:division-of-tasks}

\end_inset 

.
 Group members with 
\emph on 
(backup)
\emph default 
 written next to their names will be called upon to perform that task in
 the event that the others cannot complete it on their own, or extra effort
 is needed.
\layout Standard


\begin_inset Float table
placement bp
wide false
collapsed false

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="right" valignment="top" leftline="true" width="0(null)">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Manager
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Graham Le Page
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Librarian
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Robert McQueen
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Secretary
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Andrew Medworth
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
User documentation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Neofytos Mylona
\layout Standard

Graham Le Page
\layout Standard

Alan Treanor
\layout Standard

Andrew Medworth 
\emph on 
(backup)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Design & Coding
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Robert McQueen
\layout Standard

Steven Cooper
\layout Standard

Andrew Medworth
\layout Standard

Sidath Senanayake
\layout Standard

Zhan Li 
\emph on 
(backup)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family sans 
\series bold 
Troubleshooting & Testing
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Zhan Li
\layout Standard

Alan Treanor
\layout Standard

Sidath Senanayake 
\emph on 
(backup)
\layout Standard


\emph on 
As many others as are required
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{table:division-of-tasks}

\end_inset 

Division of project tasks
\end_inset 


\the_end
