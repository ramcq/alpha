#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language british
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Animating Algorithms: Description Of System Components
\layout Author

Robert McQueen, Andrew Medworth,
\newline 
Steven Cooper, Sidath Senanayake
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Introduction
\layout Standard

This is the description of system components document for the "Animating
 Algorithms" (Topic 8.5) Computer Science Tripos Part IB / Part II (General)
 group project.
 The authors are the coders of group "Alpha", listed individually above.
 This project is being over seen by Steven Hand (smh22@cam.ac.uk).
\layout Section

Algorithms
\layout Subsection

Abstract classes (
\family typewriter 
Algorithm
\family default 
, 
\family typewriter 
VectorAlgorithm
\family default 
, 
\family typewriter 
GraphAlgorithm
\family default 
)
\layout Standard

These abstract classes provide a simple collection of the methods that need
 to be called on algorithms, static methods for querying information about
 the algorithm, such as its name and description, as well as defining the
 constructors which set the initial data, and the method to execute the
 algorithm.
 They were coded by Robert McQueen.
\layout Subsection


\family typewriter 
InsertionSort
\layout Standard

This class performs an insertion sort on the data passed to it, calling
 the relevant animator primitives to provide an explanation of each step
 as well as to dictate how the animation proceeds.
 It was coded and tested by Sid.
\layout Subsection


\family typewriter 
QuickSort
\layout Standard

The class performs a recursive quick sort on the supplied data calling on
 the animator to provide short descriptions of each step and to perform
 the actual animation that the user sees.
 It was coded and tested by Sid.
\layout Subsection


\family typewriter 
BiDirBubbleSort
\layout Standard

This class implements a bi-directional bubble sort on the supplied data.
 It also calls on the animator to present brief descriptions of each step
 and to describe how the animation proceeds.
 It was coded and tested by Sid.
\layout Subsection


\family typewriter 
Dijkstra
\layout Standard

This class implements Dijkstra's algorithm on the supplied data.
 It calls on the animator class to describe which step it is currently performin
g and to indicate how the animation should proceed.
 It was coded and tested by Sid.
\layout Subsection


\family typewriter 
Kruskal
\layout Standard

This class find the minimum spanning tree of a graph using Kruskal's method.
 It also calls on the animator to provide a brief description of what happens
 at each step and to indicate how the animation proceeds.
 It was coded and tested by Sid.
\layout Section

Animators
\layout Subsection

Abstract classes (
\family typewriter 
Animator
\family default 
, 
\family typewriter 
GraphAnimator
\family default 
, 
\family typewriter 
VectorAnimator
\family default 
)
\layout Subsubsection


\family typewriter 
Animator
\layout Standard

The 
\family typewriter 
Animator
\family default 
 abstract class provides the API for the methods that all animators have
 in common.
 These include the methods 
\family typewriter 
setSteps()
\family default 
 and 
\family typewriter 
setCurrentStep()
\family default 
 which allow the algorithm to register a range of steps and show the user
 which is currently active, 
\family typewriter 
showMessage()
\family default 
 to show text to the user, and the inner class 
\family typewriter 
State
\family default 
 with the 
\family typewriter 
saveState()
\family default 
 and 
\family typewriter 
restoreState()
\family default 
 methods to save and restore the animator, allowing the algorithm to be
 broken down into logical steps which can be returned to later.
 A 
\family typewriter 
setFpsFactor()
\family default 
 method is available to allow algorithms to make animation run faster over
 
\begin_inset Quotes eld
\end_inset 

boring
\begin_inset Quotes erd
\end_inset 

 parts of the algorithm such as operations which must be performed but do
 not aid understanding of the mechanism, or to run more slowly at complicated
 parts.
\layout Subsubsection


\family typewriter 
GraphAnimator
\layout Standard

The 
\family typewriter 
GraphAnimator
\family default 
 abstract class provides the fairly simple API for the graph animation primitive
s, including 
\family typewriter 
createGraph()
\family default 
 to register the initial cost matrix, methods to set node and edge labels,
 flash nodes and edges, and include nodes and edges in similarly-coloured
 sets.
\layout Subsubsection


\family typewriter 
VectorAnimator
\layout Standard

The 
\family typewriter 
VectorAnimator
\family default 
 abstract class, and its inner classes 
\family typewriter 
Vector
\family default 
 and 
\family typewriter 
Arrow
\family default 
, provide the API for the operations that are required to animate vector
 algorithms, such as creating vectors and arrows, swapping elements, moving
 arrows, flashing elements, and setting labels.
\layout Subsection

Exceptions
\layout Subsubsection


\family typewriter 
InputTooLongException
\layout Standard

This exception is thrown if an attempt is made to create a vector with more
 than 20 elements.
\layout Subsubsection


\family typewriter 
TooManyVectorsException
\layout Standard

This exception is thrown if an attempt is made to create a new vector when
 all available positions on the animation canvas have been filled.
\layout Subsubsection


\family typewriter 
InvalidLocationException
\layout Standard

This exception is thrown if an attempt is made to reference a vector element
 which does not exist, for example an element with a negative offset, or
 with an offset greater than the size of the vector.
 This applies to element moving, swapping and copying, arrow movement and
 creation, and so forth.
\layout Subsubsection


\family typewriter 
ItemDeletedException
\layout Standard

This exception is thrown if an attempt is made to make any modification
 (move an associated arrow, alter an element, change a label, etc) of a
 vector or arrow which has previously had the 
\family typewriter 
delete()
\family default 
 method called on it.
 This prevents the 
\begin_inset Quotes eld
\end_inset 

resurrection
\begin_inset Quotes erd
\end_inset 

 of deleted vectors and arrows if animation primitives are called on them.
\layout Subsubsection


\family typewriter 
NonSquareMatrixException
\layout Standard

This exception is thrown if an attempt is made to create a graph with a
 non-square cost matrix.
 The exception class itself has a static method for checking the 
\begin_inset Quotes eld
\end_inset 

squareness
\begin_inset Quotes erd
\end_inset 

 of an 
\family typewriter 
int[][]
\family default 
, and this is called whenever an attempt to create a graph is made.
\layout Section

Queues
\begin_inset LatexCommand \label{sec:Queues}

\end_inset 


\layout Standard

The queue classes were written by Robert McQueen, and form a layer of abstractio
n between the algorithms and the actual implementation of the animators,
 and allow the algorithms to run to completion before any animation is shown
 to the user.
 When the algorithm uses an animator primitive, the queue internally records
 the requested action, and returns control to the algorithm.
\layout Standard

Every so often the algorithm will call a special animation primitive which
 signals a 
\emph on 
checkpoint.
 
\emph default 
These checkpoints are the junctures at which the animation will pause and
 the user will have the opportunity to go forward or back --- essentially,
 each sequence of animation primitives between checkpoints constitutes one
 step of the algorithm.
 For example, if we were implementing insertion sort, one step might consist
 of the insertion of a single value into the vector: we might want to move
 a pointer along the vector until we find the correct place for the value,
 move all the other data items up to make room, insert the value into the
 gap, and update a pointer showing what portion of the vector is sorted.
 Clicking the 
\begin_inset Quotes eld
\end_inset 

next step
\begin_inset Quotes erd
\end_inset 

 button would then animate the insertion of the next item.
\layout Standard

As the algorithm progresses, the queue builds up a list of all of the animator
 primitives which the algorithm used to get between one check-pointed state
 of the animator and the next.
 The shell can then provide the queue with an actual implementation of the
 animator primitives, and use the 
\family typewriter 
AnimatorQueue
\family default 
 interface to instruct the queue to execute each batch of queued primitives
 in sequence on the actual animator.
\layout Standard

The more important functionality of this package is that, at each checkpoint
 reached when playing back the stored events, it stores the state of the
 animation canvas and the data structures of the animator.
 This will allow the user to roll the animator back to previous states so
 the user can revisit previous steps of the algorithm, and the queue retains
 the steps that need to be done to return the animator to subsequent states.
 There will be methods in the 
\family typewriter 
AnimatorQueue
\family default 
 interface available to the shell which will cause the animation to move
 forwards and backwards between checkpoints.
 To move backwards, the state of the canvas and data structures at the previous
 checkpoint will be restored, and the queue's internal structures will be
 updated accordingly.
 To move forwards, the next animation primitives will be executed in sequence
 until the next checkpoint is reached.
\layout Subsection

Interface 
\family typewriter 
AnimatorQueue
\layout Standard

This interface provides the methods which the shell will use to control
 the delivery of animation events from the queue to the animator.
 It has two methods 
\family typewriter 
next()
\family default 
 and 
\family typewriter 
prev()
\family default 
 to move between stored algorithm steps, and booleans 
\family typewriter 
hasNext()
\family default 
 and 
\family typewriter 
hasPrev()
\family default 
 to check for the availability of these steps.
 It also provides an 
\family typewriter 
isBusy()
\family default 
 method to check if the queue's event delivery thread is currently engaged
 in moving from one step to the next.
 This allows the shell to poll the status of the queue to keep the user
 interface updated while animation is in progress.
\layout Subsection


\family typewriter 
GenericQueue
\layout Standard

The 
\family typewriter 
GenericQueue
\family default 
 class provides the common functionality which is used by both the 
\family typewriter 
GraphQueue
\family default 
 and 
\family typewriter 
VectorQueue
\family default 
 classes.
 Its functionality breaks down into two parts.
 The first is to expose an interface which the 
\family typewriter 
GraphQueue 
\family default 
and
\family typewriter 
 VectorQueue
\family default 
 classes can use to implement the animator APIs, and enqueue the events.
 To do this, it provides an 
\family typewriter 
enqueue()
\family default 
 function which allows the graph and vector queue classes to queue a method
 call, with the subject object, method name, arguments, and if one is necessary,
 the placeholder object that the queue will return from the method call.
 The 
\family typewriter 
GenericQueue
\family default 
 stores these values as members in an internal
\emph on 
 
\family typewriter 
\emph default 
Event
\family default 
 object, and stores that 
\family typewriter 
Event
\family default 
 in a linked list within an instance of the 
\family typewriter 
State
\family default 
 inner class.
 When the algorithm invokes the 
\family typewriter 
saveState()
\family default 
 method on the queue, a new 
\family typewriter 
State
\family default 
 object is created, and the subsequent events stored inside that.
\layout Standard

The second set of functionality is that exposed to the shell through the
 
\family typewriter 
AnimatorQueue
\family default 
 interface, and its associated thread for delivery of the queued method
 calls to the real animator.
 When 
\family typewriter 
next()
\family default 
 is called, the waiting thread is awoken, and saves the state of the real
 animator before using introspection to find and invoke the list of queued
 method calls on the actual objects.
 A hash map is maintained of placeholder objects which the queue returned
 to the algorithm, mapping to actual objects which the animator returned
 to the queue.
 Calls to the 
\family typewriter 
prev()
\family default 
 method signal the delivery thread to load the saved states back into the
 animator.
\layout Subsection


\family typewriter 
VectorQueue, GraphQueue
\layout Standard

These are simple classes with a series of stub method calls and stub inner
 classes, each of which merely call
\family typewriter 
 enqueue()
\family default 
 on the generic queue, to store the animation methods call.
 Methods which return instances of the inner classes instead return the
 stub inner classes, which the 
\family typewriter 
GenericQueue
\family default 
 maps to the real returned objects when the methods are called on the real
 animator.
\layout Subsection


\family typewriter 
Primitive
\layout Standard

This is a simple container class with eight constructors to encapsulate
 the eight primitive types.
 It does this with the usual wrapper types (such as 
\family typewriter 
Integer
\family default 
), but also keeps a reference to the 
\family typewriter 
Class
\family default 
 value of the primitive type.
 This is necessary so that the queue can look up the method with the primitive
 class values when determining the types of arguments before executing method
 calls, rather than the class of the wrapper types, which wouldn't match
 the method signature.
 The queue has to look up methods by prototype just before executing, because
 at the time of the event being enqueued, some of the parameters could be
 placeholder objects which are later replaced when the events are delivered
 to the real animator, and the real objects are returned.
\layout Subsection

Exceptions
\layout Standard

The queue does little to no processing of input data itself.
 However, in order to prevent the algorithm from being able to enqueue events
 which will later fail when delivered to a real animator, the queue does
 the same bounds and sanity checks that the real animators do, such as 
\family typewriter 
InputTooLongException
\family default 
, 
\family typewriter 
InvalidLocationException
\family default 
 and 
\family typewriter 
ItemDeletedException
\family default 
 for the 
\family typewriter 
VectorQueue
\family default 
, and 
\family typewriter 
NonSquareMatrixException
\family default 
 and 
\family typewriter 
InvalidLocationException 
\family default 
for the 
\family typewriter 
GraphQueue
\family default 
.
 The queue implementation does throw one exception, 
\family typewriter 
NoSuchStateException
\family default 
, when the shell attempts to advance the state forward or backwards when
 there is no such later or previous state.
\layout Section

Shell
\layout Subsection


\family typewriter 
AlgorithmCatalog
\family default 
, 
\family typewriter 
StaticAlgorithmCatalog
\layout Standard

Written by Robert McQueen, the 
\family typewriter 
AlgorithmCatalog
\family default 
 abstract class defines a 
\family typewriter 
getAvailableAlgorithms() 
\family default 
method to fetch all of the available algorithms, and an 
\family typewriter 
AvailableAlgorithm
\family default 
 inner class to represent one of them.
 As well as returning the algorithm's name in the 
\family typewriter 
toString()
\family default 
 method, this inner class implements 
\family typewriter 
getDescription()
\family default 
 and 
\family typewriter 
getType()
\family default 
 (such as 
\begin_inset Quotes eld
\end_inset 

Graph
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

Vector
\begin_inset Quotes erd
\end_inset 

) methods for the shell to build a list of the available algorithms.
 This inner class also provides an abstract factory role, allowing the shell
 to use the 
\family typewriter 
getInputPanel()
\family default 
, 
\family typewriter 
getAlgorithm()
\family default 
, 
\family typewriter 
getQueue()
\family default 
 and 
\family typewriter 
getAnimator()
\family default 
 methods to get the appropriate user interface to gather the input for the
 algorithm, instantiate an instance of the algorithm, and create instances
 of the appropriate vector or graph queue and animator classes for this
 algorithm.
\layout Standard

The intention here is to avoid the need for the shell to deal specially
 with different kinds of algorithms, and provide one place in which new
 algorithms, animators, queues and input panels can be added to the system.
 The current implementation of this is 
\family typewriter 
StaticAlgorithmCatalog
\family default 
, which has a string list of the algorithms to interrogate, and finds them
 by introspection.
 The interface is designed such that algorithms or any of the other classes
 could be loaded dynamically, or downloaded from the network, in a more
 advanced implementation of the catalog.
\layout Subsection


\family typewriter 
Shell and Button, Choose, VectorInput and GraphInput Panels
\layout Standard

Written by Robert McQueen, the shell provides the user interface for the
 entire system, guiding the user through a wizard-like interface to choose
 an algorithm, input its data, and view the animation.
 It is made up of a singleton supervisor class, 
\family typewriter 
Shell
\family default 
, which contains the 
\family typewriter 
main()
\family default 
 method which instantiates the singleton and invokes its 
\family typewriter 
run()
\family default 
 method in the Swing event dispatch thread.
 All method calls which manipulate the Swing UI must be made from this thread,
 and this thread must not be blocked by any component of the UI.
\layout Standard

The shell first creates a 
\family typewriter 
JFrame
\family default 
 to be the main window of the program, and divides it into two areas, one
 main area which can contain one of a variety of 
\family typewriter 
ShellPanel
\family default 
s depending on the shell's mode, and a 
\family typewriter 
ButtonPanel
\family default 
 which remains constantly present along the bottom, and can be configured
 to whichever buttons are required by the current panel.
 The shell provides two buttons which are always visible, 
\begin_inset Quotes eld
\end_inset 

Exit
\begin_inset Quotes erd
\end_inset 

 to leave the program, and 
\begin_inset Quotes eld
\end_inset 

Restart
\begin_inset Quotes erd
\end_inset 

 to return to the initial state of the interface.
 The remaining entries on the button bar are created by the main panel calling
 an update method, providing a list of buttons.
 When these buttons are clicked, the Shell passes the event down to the
 current 
\family typewriter 
ShellPanel
\family default 
 which implements the 
\family typewriter 
ActionListener
\family default 
 interface.
\layout Standard

After this initialisation, the shell enters 
\emph on 
choose
\emph default 
 mode, and loads the main panel with an instance of 
\family typewriter 
ChoosePanel
\family default 
.
 This uses the shell's instance of 
\family typewriter 
StaticAlgorithmCatalog
\family default 
 to build a tree of the available algorithms, and shows their description
 to the user.
 When an algorithm has been selected, the 
\family typewriter 
AvailableAlgorithm
\family default 
 class is passed to the shell with the 
\family typewriter 
setChoice()
\family default 
 method, and the shell is advanced to 
\emph on 
input
\emph default 
 mode when the user clicks 
\begin_inset Quotes eld
\end_inset 

Next
\begin_inset Quotes erd
\end_inset 

.
\layout Standard

To enter 
\emph on 
input
\emph default 
 mode, the 
\family typewriter 
getInputPanel()
\family default 
 method is used on the 
\family typewriter 
AvailableAlgorithm
\family default 
 choice to get the appropriate input panel (initially one of either 
\family typewriter 
VectorInputPanel 
\family default 
or 
\family typewriter 
GraphInputPanel
\family default 
) and display it in the main panel.
 The user then enters the data, and clicks the 
\begin_inset Quotes eld
\end_inset 

Next
\begin_inset Quotes erd
\end_inset 

 button.
 The input panel uses the 
\family typewriter 
getAlgorithm()
\family default 
 method on the 
\family typewriter 
AvailableAlgorithm
\family default 
 choice to create the algorithm, and passes it to the shell with the 
\family typewriter 
setAlgorithm()
\family default 
 method before advancing the shell to 
\emph on 
animate
\emph default 
 mode.
\layout Standard

The 
\family typewriter 
AnimatorPanel
\family default 
 uses 
\family typewriter 
getQueue()
\family default 
 and 
\family typewriter 
getAnimator()
\family default 
 on the 
\family typewriter 
AvailableAlgorithm
\family default 
 choice, to get a matching pair of 
\family typewriter 
GraphQueue
\family default 
 and 
\family typewriter 
ShellGraphAnimator
\family default 
, or 
\family typewriter 
VectorQueue
\family default 
 and 
\family typewriter 
ShellVectorAnimator
\family default 
.
 The panel is filled with the animator canvas, and a list to show the step
 descriptions provided to the shell by the algorithm using the 
\family typewriter 
setSteps()
\family default 
 and 
\family typewriter 
setCurrentStep()
\family default 
 methods, and a space to show the messages given by the 
\family typewriter 
showMessage()
\family default 
 animator method.
 These methods are called on the 
\family typewriter 
Shell
\family default 
 object when they are delivered to the 
\family typewriter 
ShellGraphAnimator
\family default 
 or 
\family typewriter 
ShellVectorAnimator
\family default 
, and passed down to the 
\family typewriter 
AnimatorPanel
\family default 
 if the shell is in 
\emph on 
animate
\emph default 
 mode.
\layout Standard

A thread is created which calls 
\family typewriter 
execute()
\family default 
 on the algorithm, storing up events and states on the queue object.
 The shell then instructs the queue to dispatch these events to the animator
 stage by stage, and polls the queue to see when animation has completed
 and prevent the Swing event dispatch thread from being blocked.
 At each stage, the user can return to the previous stage by clicking the
 
\begin_inset Quotes eld
\end_inset 

Previous
\begin_inset Quotes erd
\end_inset 

 button, resume play forwards with the 
\begin_inset Quotes eld
\end_inset 

Next
\begin_inset Quotes erd
\end_inset 

 button, stop it with the 
\begin_inset Quotes eld
\end_inset 

Stop
\begin_inset Quotes erd
\end_inset 

 button, etc.
 These are implemented by using the methods of the 
\family typewriter 
AnimatorQueue
\family default 
 interface.
\layout Subsection

Interface 
\family typewriter 
ShellAnimator
\layout Standard

This interface contains the methods which the shell uses to control the
 animator when the events are being run off the queue.
 Because most of the control and invocation of the animator is done within
 the queue's threads, this is a simple interface.
 Currently it contains a method 
\family typewriter 
setFps()
\family default 
 to allow the shell to control the speed of animation, and a 
\family typewriter 
fastForward()
\family default 
 to try and flush the queue of pending animation events as quickly as possible.
\layout Subsection


\family typewriter 
ShellVectorAnimator
\layout Standard

This class was written by Andrew Medworth.
 It is the class which does the actual graphical work for vector algorithms,
 such as the sort algorithms we implemented.
 Its constructor takes a 
\family typewriter 
Container
\family default 
, which will normally be a 
\family typewriter 
JFrame
\family default 
, and instantiates its own 
\family typewriter 
JPanel
\family default 
 to go inside this.
 It overrides the 
\family typewriter 
paintComponent(Graphics)
\family default 
 method of the 
\family typewriter 
JPanel
\family default 
 with a method which redraws the current animation canvas, thus causing
 the canvas to be redrawn if it is ever obscured.
\layout Standard

Animation is done using a 
\family typewriter 
Timer
\family default 
 (from 
\family typewriter 
javax.swing
\family default 
), which sends periodic 
\family typewriter 
ActionEvent
\family default 
s to the 
\family typewriter 
ShellVectorAnimator
\family default 
.
 The class responds to these by implementing 
\family typewriter 
ActionListener
\family default 
 and having a method, 
\family typewriter 
actionPerformed
\family default 
, which is executed on each 
\family typewriter 
ActionEvent
\family default 
.
 This method contains the instructions required for drawing the next animation
 frame.
\layout Standard

The animator knows what event it is in the process of animating by means
 of an internal queue (not to be confused with the queue classes --- see
 section\SpecialChar ~

\begin_inset LatexCommand \ref{sec:Queues}

\end_inset 

) which stores instances of the inner class 
\family typewriter 
AnimationEvent
\family default 
.
 Each 
\family typewriter 
AnimationEvent
\family default 
 represents a very fundamental animation operation, even more fundamental
 than the animation primitives dealt with by the algorithm: examples of
 types of 
\family typewriter 
ActionEvent
\family default 
 would be moving a vector element horizontally out to lie beside the vector,
 or moving an arrow from one position to another.
\layout Standard

When the 
\family typewriter 
actionPerformed
\family default 
 method is called, the current event is examined to see what type it is,
 and an appropriate set of instructions is called, to move the animation
 on by one frame.
 This is generally done, somewhat clumsily, by a global integer variable
 
\family typewriter 
intermediateOffset
\family default 
, which is incremented on each frame and tells the current operation, for
 example, by how much a vector element should be displaced from its position
 at the start of the current event.
\layout Standard

After an event is completed, 
\family typewriter 
intermediateOffset
\family default 
 is zeroed, and the current event is set to 
\family typewriter 
null
\family default 
, causing the next event to be taken off the event queue.
 If the queue is empty, the 
\family typewriter 
Timer
\family default 
 is stopped and the animator 
\family typewriter 
wait
\family default 
s until the queue is filled again, by animation primitives called by the
 queue class (see section\SpecialChar ~

\begin_inset LatexCommand \ref{sec:Queues}

\end_inset 

).
\layout Standard

The 
\family typewriter 
awt
\family default 
 library does not directly support double buffering, and there is no equivalent
 of the 
\family typewriter 
Graphics
\family default 
 class in Swing, which does support double buffering throughout.
 In order to facilitate flicker-free animation, therefore, the animator
 maintains a 
\family typewriter 
BufferedImage
\family default 
 object which holds the current state of the canvas.
 When graphical operations are actually being done, they are performed on
 this 
\family typewriter 
BufferedImage
\family default 
 rather than directly on the screen.
 At the start of the 
\family typewriter 
actionPerformed
\family default 
 method, this 
\family typewriter 
BufferedImage
\family default 
 is written out to the screen.
 This 
\family typewriter 
BufferedImage
\family default 
 is also useful for redrawing the animation canvas if it is obscured and
 then revealed again while the 
\family typewriter 
Timer
\family default 
 is not running: in fact, this is precisely what the overridden 
\family typewriter 
paintComponent
\family default 
 method on the 
\family typewriter 
JPanel
\family default 
 instantiated in the constructor does.
\layout Standard

Vectors and arrows are represented by instances of the inner classes 
\family typewriter 
Vector
\family default 
 and 
\family typewriter 
Arrow
\family default 
 respectively.
 These objects contain information about the placing, colour, label and
 other properties of each vector or arrow, along with methods for the animation
 primitives as specified by the parent classes 
\family typewriter 
VectorAnimator.Vector
\family default 
 and 
\family typewriter 
VectorAnimator.Arrow
\family default 
.
 Here, these methods are synchronized on the parent 
\family typewriter 
ShellVectorAnimator
\family default 
 (to prevent concurrency issues with the event queue, which is not designed
 to be resilient under concurrent access).
 Each one adds the appropriate 
\family typewriter 
AnimationEvent
\family default 
s to the animator's event queue, and then 
\family typewriter 
wait
\family default 
s until the event queue becomes empty again (which it will after the primitive
 has been animated in full).
 This is done in order that the animation primitive method should not exit
 until the animation of that primitive is complete --- this makes the design
 of the queue classes easier, and it also results in not having to worry
 about the effect of calling animation primitives while the 
\family typewriter 
Timer
\family default 
 is running and animation is actually in progress.
\layout Standard

The 
\family typewriter 
Vector
\family default 
 and 
\family typewriter 
Arrow
\family default 
 inner classes each contain a 
\family typewriter 
getState()
\family default 
 method which returns a 
\family typewriter 
VectorState
\family default 
 or 
\family typewriter 
ArrowState
\family default 
 object containing all the information needed to restore that particular
 vector or arrow.
 These objects are used to make up a 
\family typewriter 
State
\family default 
 object for the animator as a whole.
 These objects facilitate the saving and restoring of the animator state,
 in order that the user can jump forwards and backwards in the algorithm.
 When the 
\family typewriter 
saveState()
\family default 
 method is called on the animator, it calls 
\family typewriter 
getState()
\family default 
 on each 
\family typewriter 
Vector
\family default 
 and 
\family typewriter 
Arrow
\family default 
 it knows about (pointers to each 
\family typewriter 
Vector
\family default 
 and 
\family typewriter 
Arrow
\family default 
 are stored in two 
\family typewriter 
LinkedList
\family default 
s when the vectors and arrows are created), puts these states in two arrays,
 and puts these two arrays in a 
\family typewriter 
State
\family default 
 object, which is then returned.
 When 
\family typewriter 
restoreState
\family default 
 is called for a particular state, the 
\family typewriter 
VectorState
\family default 
 and 
\family typewriter 
ArrowState
\family default 
 objects are extracted and the 
\family typewriter 
restore()
\family default 
 method is called on each.
 The beauty is that, because these are inner classes, each is already associated
 with the correct 
\family typewriter 
Arrow
\family default 
 or 
\family typewriter 
Vector
\family default 
 object, and so it simply updates the object's fields according to the values
 stored in the state object.
\layout Standard

The 
\family typewriter 
State
\family default 
 object holds one value as well as the arrays of 
\family typewriter 
ArrowState
\family default 
s and 
\family typewriter 
VectorState
\family default 
s, namely the value of the boolean array 
\family typewriter 
colsOccupied
\family default 
.
 This array is used for placing new 
\family typewriter 
Vector
\family default 
s: the canvas is divided up into logical columns, each of which is allowed
 to contain a 
\family typewriter 
Vector
\family default 
, and the array stores which of these columns is occupied.
 It is stored in the 
\family typewriter 
State
\family default 
 object so that, if a vector is created in a particular stage of an algorithm
 and the animator is then taken back to a state before that vector was created,
 the vector will appear in the same position as before if it is created
 again.
\layout Standard

The design of this class has a number of drawbacks, which should be drawn
 to the reader's attention.
 Firstly, it would be very time-consuming to modify this class to lay things
 out differently, for example by having wider vectors, or larger fonts.
 This is because the layout information is spread out in lots of methods,
 with each layout property being redundantly hard-coded again and again
 into animation methods.
 Given the chance to start again, this information should be stored centrally
 (non-redundantly) in static variables, so that it can be modified more
 easily.
\layout Standard

Secondly, highlighting the 
\begin_inset Formula $n$
\end_inset 

th digit of each element of a vector (to assist with the visualisation of
 Radix sorting) has not been implemented at the time of writing.
\layout Standard

Thirdly, the 
\family typewriter 
fastForward
\family default 
 mechanism, designed to make the animator stop visually displaying its animation
 and just execute the animation events at maximum speed (so that the user
 can jump forwards in time as well as backwards), does not work at all.
 It is supposed to work by stopping the 
\family typewriter 
Timer
\family default 
, repeatedly calling the 
\family typewriter 
actionPerformed
\family default 
 method until the event queue is exhausted, and then 
\family typewriter 
wait
\family default 
ing until something new arrives; however, this 
\family typewriter 
wait
\family default 
 operation causes 
\family typewriter 
IllegalMonitorStateException
\family default 
 to be thrown.
 This issue has yet to be thoroughly investigated, but it is suspected to
 be due to the fact that the methods which add events to the queue contain
 
\family typewriter 
synchronized
\family default 
 blocks, and so they cannot be run at the same time as another method 
\family typewriter 
wait
\family default 
s for an event.
\layout Subsection


\family typewriter 
ShellGraphAnimator
\layout Standard

This class was written by Steven Cooper.
 It is the class which does the actual graphical work for graph algorithms,
 for example the 
\family typewriter 
Kruskal
\family default 
 and 
\family typewriter 
Dijkstra
\family default 
 classes.
 Its constructor is the same format as 
\family typewriter 
ShellVectorAnimator
\family default 
.
 Also, a timer is used to control the animation using an event queue in
 the same way as 
\family typewriter 
ShellVectorAnimator
\family default 
.
\layout Standard

Data for nodes and edges displayed are represented by arrays of instances
 of the 
\family typewriter 
Node
\family default 
 and 
\family typewriter 
Edge
\family default 
 inner classes.
 These contain data to determine the coordinates, colour, and labels of
 the node or edge when drawn.
 They also include methods which add 
\family typewriter 
AnimationEvents
\family default 
 to the event queue in the same way as the methods in the 
\family typewriter 
Vector
\family default 
 inner class in 
\family typewriter 
ShellVectorAnimator
\family default 
.
 However, these methods are not called by the API directly, all of the API
 methods are in the main body of the class.
 When called by the GenericQueue the API implementations call methods in
 the appropriate 
\family typewriter 
Nodes
\family default 
 or 
\family typewriter 
Edge
\family default 
s that need to be animated in some way.
 The methods which draw on the 
\family typewriter 
Graphics2D
\family default 
 canvas are all private methods in the main body of the class.
\layout Standard

The animator contains a 
\family typewriter 
saveState()
\family default 
 method which creates new copies of the 
\family typewriter 
Node
\family default 
 and 
\family typewriter 
Edge
\family default 
 arrays in a 
\family typewriter 
State
\family default 
 object.
 When 
\family typewriter 
restoreState()
\family default 
 is called, the data in the 
\family typewriter 
State
\family default 
 object will be copied over the currently working data, and the entire image
 redrawn using the restored data.
\layout Standard

Nearly all of the style options used in displaying the graph are stored
 at the top of the code in the form of private constants, so the set of
 colours used, or the font size used to display text can be easily changed.
 However, the overall layout of the nodes is just done by placing points
 on an n-sided polygon, and there is currently no alternative to this.
\layout Standard

Currently, the 
\family typewriter 
fastForward
\family default 
 method suffers the same problem as found in the same method on ShellVectorAnima
tor.
\layout Subsection

Exceptions
\layout Subsubsection


\family typewriter 
InvalidAnimationEventException
\layout Standard

This exception is internal to 
\family typewriter 
ShellVectorAnimator
\family default 
 and should never be thrown externally.
 It is thrown by the constructors to the 
\family typewriter 
AnimationEvent
\family default 
 inner class of 
\family typewriter 
ShellVectorAnimator
\family default 
, if the constructor is called with an inappropriate event type.
 This exception is caught within 
\family typewriter 
ShellVectorAnimator
\family default 
 and, if it arises, an error message is printed on 
\family typewriter 
System.err
\family default 
 for debugging purposes.
 This can only arise due to a programming error in 
\family typewriter 
ShellVectorAnimator
\family default 
 or 
\family typewriter 
ShellGraphAnimator
\family default 
.
\layout Subsubsection


\family typewriter 
InvalidModeException
\layout Standard

This exception is called either when a user of the shell attempts to move
 the shell to a mode before the prerequisites for the mode have been met,
 such as requesting 
\emph on 
input
\emph default 
 mode before an algorithm choice has been made, or when an unrecognised
 mode is requested by the user of the shell.
 Given that the only other parts of the program requesting shell mode changes
 are other members of the shell package, this exception being thrown implies
 the presence of a bug!
\the_end
