#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Animating Algorithms: Project Progress Report
\layout Author

Steven Cooper (
\family typewriter 
sjc209
\family default 
), Graham Le Page (
\family typewriter 
gpl26
\family default 
),
\newline 
Zhan Li (
\family typewriter 
zrll2
\family default 
), Robert McQueen (
\family typewriter 
ram48
\family default 
),
\newline 
Andrew Medworth (
\family typewriter 
am502
\family default 
), Neofytos Mylona (
\family typewriter 
nm314
\family default 
),
\newline 
Sidath Senanayake (
\family typewriter 
sas58
\family default 
), Alan Treanor (
\family typewriter 
ajit2
\family default 
)
\layout Standard

{
\layout Standard

4.2 Module implementation and testing
\newline 

\layout Standard

The next task is to write the code of the classes and to test them in isolation.
 This is likely to require the construction of special test harnesses for
 separate classes.
 The deliverables for this task are a progress report by the team manager,
 which must be delivered in writing, plus code of the implementations and
 a description of the testing procedures and their results, which may be
 online.
\newline 

\layout Standard

Changes in specification or design (if any)
\layout Standard

Difficulties (if any)
\layout Standard

Project log:
\layout Itemize

Interfaces and modules
\layout Itemize

Authorship
\layout Itemize

Status (written, tested, work in hand...)
\layout Itemize

Copies of test results
\layout Itemize

Pointers to on-line sources 
\newline 

\newline 

\newline 
Animator API - Rob, Steven, Sid, Andrew
\layout Itemize

Shell appearance - Neofytos, Graham
\layout Itemize

Algorithm API & friends - Rob
\layout Itemize

Phase 2
\layout Itemize

Test Animators } Graph test - Richard
\layout Itemize

Test Algorithms} Vector test - Alan
\layout Itemize

Queue - Rob
\layout Itemize

GraphAnimator - Steven
\layout Itemize

VectorAnimator - Andrew
\layout Itemize

Document API - All coders
\layout Itemize

Document user interface - Neofytos, Graham
\layout Standard

}
\layout Section

Introduction
\layout Standard

This is the progress report document for the 
\begin_inset Quotes eld
\end_inset 

Animating Algorithms" (Topic 8.5) Computer Science Tripos Part IB / Part
 II (General) group project.The authors are the members of group 
\begin_inset Quotes eld
\end_inset 

Alpha", listed individually above.
 This project is being overseen by Steven Hand (
\family typewriter 
\series bold 
smh22@cam.ac.uk
\family default 
\series default 
).
\layout Section

Changes from specification
\layout Standard

Algorithm Package
\layout Standard

* Provision of initial data and animator moved to constructors instead.
\newline 
Animator Package
\newline 
Vector Animator
\layout Standard

* Markers and Pointers merged into Arrows.
\layout Standard

* Copy element from one pointer to another method changed to take offsets
 rather than pointers.
\layout Standard

* Specific compare two elements method removed vector primitives; un-necessary
 since you can just use highlight pointer.
\layout Standard

* Delete element method removed; vector lengths are invariant for sorting
 algorithms (moved to project extensions list).
\layout Standard

* Split vector method also removed, for similar reason (preserve invariant
 length).
\layout Standard

* Boolean highlight replaced with a few seconds of flashing.
\layout Standard

* Highlight element method added.
\newline 

\newline 
Include difficulties - refer to specification
\layout Section

Code status
\layout Standard

(Written/tested/to do etc) Include authors
\layout Subsection

Algorithms
\layout Standard

Rob?
\layout Subsection

Animators
\layout Standard

Steven, Andrew
\layout Subsection

Queues
\layout Standard

Rob
\layout Subsection

Shell
\layout Standard

Any program delivered to a client (namely the user) must be accompanied
 with a friendly, easy to use user interface.
 When we say user interface we usually refer to a program that controls
 a display for the user (usually on a computer monitor) and that allows
 the user to interact with the system.
 A system can be said to be truly user-friendly if the first time user can
 make use of it without continual reference to a manual.
 So it is vital that the design of the user interface should be carefully
 planned taking all parameters into consideration.
\layout Subsubsection

Componants:
\layout Standard

First we will split our UI into different components so that we can manage
 and implement them more easily.
\layout Itemize

The menu bar which will include the following options:
\begin_deeper 
\layout Itemize

Algorithm.
 The user by clicking on this option will be given the chance to choose
 which algorithm he wishes to see animated.
 The selection of algorithms will include the algorithms specified in the
 specification document.
\layout Itemize

Help.
 The user can get help on the spot without reference to the user manual.
\layout Itemize

Links.
 Possible links to webpages that contain animation material for algorithms.
\layout Itemize

what more can we add??
\end_deeper 
\layout Itemize

The main screen where the algorithm gets animated.
\layout Subsubsection

Ideas:
\layout Standard

It would be nice when the shell begins to have a nice graphical display
 on the screen as shown on diagram 1.
 Maybe we can achieve this by the use of a simple applet within the shell
 application that just prints on the screen.
 When the user chooses an algorithm (by the use of the mouse, don't think
 it is essential to have keyboard shortcuts) then the screen appearance
 changes and it looks like diagram 2.
 If the user chooses to run a sorting algorithm then he will be prompted
 to specify the input data by placing integers inside each box.
 Otherwise a button will give the option of filling up the boxes with random
 data.
 Similarly, if the user chooses to run a graph algorithm then he will be
 prompted with number of nodes but specifying somehow that the number can
 not exceed the number stated in the specification document.
 After doing this, there will be two buttons, the first one corresponding
 to run automatically (i.e the machine will run the animating algorithm at
 reasonable speed to completion) and the second one corresponding to run
 manually (namely the user can step through the algorithm at his own speed).
 Either of the two run buttons chosen, the animation will begin appearing
 on the main screen.
 However the input data should remain on the screen so that the user can
 reference to if he wishes.
 This will aid comprehension since he can see the initial configuration
 of data and compare with the subsequent phases.
 See diagram 3.
 If the user wishes to step through the algorithm then the presence of a
 button labelled next will be present at the bottom of the animation.
 The presence of the stop button will enable the user to stop the current
 algorithm running and the screen goes back to a state as that proposed
 when the shell loads.
\layout Section

Examples of code
\layout Standard

Explain what they do - refer to specification
\layout Subsection

Algorithms
\layout Subsection

Animators
\layout Subsection

Queues
\layout Subsection

Shell
\layout Section

Test results
\layout Standard

Richard, Alan
\layout Standard

Say what we are testing it for and how we are testing it
\layout Section

Documentation
\layout Standard

The user guide has been written by Graham, but will be updated in more detail
 as the project takes shape.
 The developers guide for adding new algorithms to the system has been written
 by Neofytos, again this will be updated in more detail as the project progresse
s.
 Current copies of both have been submitted.
\layout Section

Plan of attack
\layout Standard

Badgers
\newline 

\newline 

\the_end
