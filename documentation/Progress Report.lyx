#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language british
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Animating Algorithms: Project Progress Report
\layout Author

Steven Cooper (
\family typewriter 
sjc209
\family default 
), Graham Le Page (
\family typewriter 
gpl26
\family default 
),
\newline 
Zhan Li (
\family typewriter 
zrll2
\family default 
), Robert McQueen (
\family typewriter 
ram48
\family default 
),
\newline 
Andrew Medworth (
\family typewriter 
am502
\family default 
), Neofytos Mylona (
\family typewriter 
nm314
\family default 
),
\newline 
Sidath Senanayake (
\family typewriter 
sas58
\family default 
), Alan Treanor (
\family typewriter 
ajit2
\family default 
)
\layout Section

Introduction
\layout Standard

This is the progress report document for the 
\begin_inset Quotes eld
\end_inset 

Animating Algorithms" (Topic 8.5) Computer Science Tripos Part IB / Part
 II (General) group project.The authors are the members of group 
\begin_inset Quotes eld
\end_inset 

Alpha", listed individually above.
 This project is being overseen by Steven Hand (
\family typewriter 
\series bold 
smh22@cam.ac.uk
\family default 
\series default 
).
\layout Section

Changes from specification
\layout Paragraph

Algorithm Package
\layout Itemize

API changed to move provision of initial data and animator moved to constructors
 instead.
\layout Paragraph

Vector Animator
\layout Itemize


\family typewriter 
Marker
\family default 
s and 
\family typewriter 
Pointer
\family default 
s merged into 
\family typewriter 
Arrow
\family default 
s for ease of implementation.
\layout Itemize

Copy element from one pointer to another method changed to take offsets
 rather than pointers.
\layout Itemize

Removed vector primitive to compare two elements; un-necessary since you
 can just flash arrows.
\layout Itemize

Delete element method removed; variable vector lengths aren't necessary
 for the sorting algorithms we plan to implement.
\layout Itemize

Split vector method also removed, for similar reasons.
\layout Itemize

Boolean highlight of 
\family typewriter 
Arrow
\family default 
s supplemented with a few seconds of flashing (for both arrows and vector
 elements).
\layout Paragraph

Shell Package
\layout Itemize

It's not possible to use introspection to enumerate classes within a package,
 due to the way the class loaders work.
 Instead, an 
\family typewriter 
AlgorithmCatalog
\family default 
 interface will be created (see below).
\layout Standard

Include difficulties - refer to specification DO STUFF FOR THIS
\layout Section

Code status
\layout Standard

The latest copy of our code is available from our CVS repository, which
 is viewable on-line at:
\layout Quote


\family typewriter 
http://ned.ucam.org/cgi-bin/viewcvs.cgi/alpha/src/org/ucam/ned/teamalpha/
\layout Standard

This section contains a brief report from the authors of each package.
\layout Subsection

Algorithms (Sid)
\layout Standard

All five of the proposed algorithms have been implemented and tested by
 Sid (the coder).
 More testing (especially of the graph algorithms) will be required by other
 testers/coders to ensure that the implementations aren't flawed.
 Sid has included some sample connectivity matrices that can be used by
 testers; these are stored in the folder TestData under the file ConnectivityMat
rices.txt.
 The code produced the correct results with this data.
\layout Subsection

Animators
\layout Standard

For both the graph and vector animator APIs, a set of exceptions for invalid
 input to the methods must be created, along with static functions which
 perform these tests.
 These tests can be used by all implementers of the APIs, as well as packages
 which need to test input
\layout Subsubsection

Graph animators (Steven)
\layout Standard

Almost complete, only highlighting nodes and edges and algorithm step messages
 have to be completed.
 The algorithm step messages require calling methods on  the shell  The
 node and edge data is stored in a list of objects and a matrix of objects
 respectively.
 These have methods similar to the api calls which are called by the actual
 api method implementations.
 The class uses the same animation system as the Vector Animator, with a
 global timer picking events off an event queue, and causing the frame to
 be redrawn.
   Only used elementary tests to confirm various methods are working correctly.
\layout Subsubsection

Vector animators (Andrew)
\layout Standard

The vast majority of this class has now been completed.
 It has been subjected to cursory, informal testing, including a preliminary
 linkup with Rob's queue class.
\layout Standard

It was decided to break each animation primitive into even simpler animation
 events (e.g.
 moving an element out of its slot to lie beside the vector, moving an element
 vertically in this 
\begin_inset Quotes eld
\end_inset 

channel
\begin_inset Quotes erd
\end_inset 

, etc) which would then be queued internally by the animator and executed
 sequentially.
 This makes the system extensible, as there is a single global 
\family typewriter 
Timer
\family default 
 which sends periodic 
\family typewriter 
ActionEvent
\family default 
s to the animator to tell it to draw the next frame, at which point a central
 method (
\family typewriter 
actionPerformed()
\family default 
) looks at the current animation event (represented by an instance of the
 
\family typewriter 
AnimationEvent
\family default 
 inner class) to see what should be done next.
 It is a fairly complicated design, especially given that 
\family typewriter 
wait
\family default 
s and 
\family typewriter 
notify
\family default 
s have been added to prevent animation primitive methods from exiting until
 the relevant animation has been completed (as is the intended behaviour
 for the API).
 However, it works and is still fairly easy to understand, and this, coupled
 with its extensibility, mean that we will not be changing this fundamental
 design.
\layout Standard

The following features have yet to be implemented:
\layout Itemize

Moving elements between separate vectors
\layout Itemize

Highlighting of vector columns (for Radix sort)
\layout Standard

There are also likely to be a few more small changes to the API (for instance
 adding back in support for a boolean method 
\family typewriter 
highlight()
\family default 
 on vectors and arrows to indicate a temporary change of colour) and these
 facilities also have yet to be coded, although the implementation is likely
 to be fairly simple.
 There 
\emph on 
may
\emph default 
 also be an addition which allows the algorithm designer to specify whether
 an arrow is to be placed on the left or right of a vector: again, the implement
ation of this will not be difficult, because at present there is a boolean
 field in each 
\family typewriter 
Arrow
\family default 
 object which determines this property (at the moment, it is always set
 to 
\family typewriter 
false
\family default 
, so that all all arrows appear on the right of their vectors): all that
 is required is to allow the user to set this at the time of arrow creation
 (it will not be possible to alter this property after creation time).
\layout Standard

A problem has also been discovered with saving and restoring the animator
 state, when this is done by the queue in order to roll back to a previous
 algorithm step (checkpoint).
 The problem occurs when a new vector has been created since the last checkpoint.
 If the queue then attempts to restore the animator to the state before
 the vector was created, and run the algorithm again from that point, the
 
\family typewriter 
createVector()
\family default 
 method will be called again to create the same vector.
 This would not be a problem, were it not for the fact that the animator
 decides where to place new vectors on the basis of an integer field, 
\family typewriter 
highestColUsed
\family default 
, which tracks how many vectors there currently are on the canvas.
 The animator places the new vector to the right of what it thinks is the
 right-most vector: unfortunately, if the state is rolled back, this variable
 is not restored to its value at the time of the checkpoint, so the new
 vector is drawn to the right of its previous position and the whole restore
 mechanism breaks.
\layout Standard

This can be remedied by using a more advanced way of laying out vectors
 on screen, which will keep track of which columns are vacant and insert
 newly-created vectors into the left-most free column.
 This will also solve a problem related to the deletion of vectors and arrows:
 at present, the space occupied by a deleted vector will be permanently
 left blank, and cannot be filled by another vector.
\layout Standard

Finally, there is a more fundamental problem with this class in that it
 is not easy to change the format or layout of the canvas.
 For example, it would be difficult to change the width of vectors, or the
 size of the text, or the height of elements, or the gap between vectors,
 without altering myriad numbers within the class.
 If time permits, the code should be tidied up to put basic dimensions in
 global variables, to make them easier to change.
\layout Standard

More testing needs to be done on this class: all animation primitives need
 to be exhaustively tested, especially the ones involving moving arrows
 very close together (it is unclear whether they will be redrawn correctly).
 Input of extreme data (e.g.
 very long vectors, large vector elements, or long arrow labels) is also
 a concern.
 The person responsible for the testing of this class is Alan.
\layout Subsection

Queues (Rob)
\layout Standard

A class 
\family typewriter 
GenericQueue
\family default 
 has been written, to provide the common functionality which is used by
 both the 
\family typewriter 
GraphQueue
\family default 
 and 
\family typewriter 
VectorQueue
\family default 
 classes.
 It implements an inner class 
\family typewriter 
State
\family default 
 to store each simulated state that the algorithm requests, and each of
 these contains a linked list of 
\family typewriter 
Event
\family default 
.
 Functionally complete.
 Untested.
 
\layout Subsection

Shell
\layout Standard

The user interface which will be implemented by the shell has been designed,
 and a proof of concept created.
 This has yet to be written though.
\layout Standard

There will be three main screens in the system:
\layout Enumerate


\emph on 
The algorithm selection screen
\emph default 
 (Diagram 1): this will be the screen that appears first when the system
 is loaded.
 It will have a list of available algorithms, with a description of each
 algorithm showing when the algorithm is selected.
 There will be a 'Next' button which when clicked will advance to the data
 input screen.
 
\layout Enumerate


\emph on 
The data input screen
\emph default 
 (Diagram 2): this will have some text boxes for user input, the number
 of boxes will depend on the algorithm used.
 It will have a 'Random' button to generate random input, a 'Back' button
 to return to the algorithm select menu, and two buttons to start the algorithm.
 The 'Run Automatically' button will start the algorithm and run it through
 to completion, the 'Run Manually' button will animate the algorithm one
 step at a time, with the user choosing when to move on.
\layout Enumerate

the animation screen (Diagram 3)
\begin_deeper 
\layout Itemize

This will show the animation of the algorithm, along with a description
 of what is happening at each step.
 There will be 'Next', 'Previous', 'Play' and 'Pause' buttons to step through
 the algorithm, as well as a 'Restart' button to return to the first step,
 and an 'Exit' button to return to the algorithm select screen.
\end_deeper 
\layout Standard

In place of the introspection, which hasn't proved possible, the shell will
 internally make use of a 
\family typewriter 
AlgorithmCatalog
\family default 
 interface, which provides methods to enumerate the available algorithms,
 load them into the JVM, and instantiate the appropriate 
\family typewriter 
Queue
\family default 
 and 
\family typewriter 
Animator
\family default 
 classes for the shell.
 
\layout Section

Test results
\layout Standard

Richard, Alan
\layout Standard

Say what we are testing it for and how we are testing it.
 Also test strategy.
\layout Section

Documentation
\layout Standard

The user guide has been written by Graham, but will be updated in more detail
 as the project takes shape.
 The developers guide for adding new algorithms to the system is being written
 by Neofytos, again this will be updated in more detail as the project progresse
s.
 Current copies of both have been submitted.
 All code has been documented by the coders as it has been written.
\layout Section

Plan of action
\layout Standard

To be completed by Sunday 15th Feb:
\layout Itemize

Finish of last parts of
\begin_deeper 
\layout Itemize

algorithms - Sid
\layout Itemize

animator - Steven and Andrew
\layout Itemize

queue - Rob
\end_deeper 
\layout Standard

To be completed by Wednesday 18th Feb:
\layout Itemize

Write and test shell - Rob and Sid
\layout Itemize

Fully test modules - Richard and Alan
\layout Standard

To be completed by Wednesday 25th Feb:
\layout Itemize

Integrate all code together - Sid, Steven, Andrew and Rob
\layout Itemize

Fully test entire program - Richard and Alan
\layout Itemize

Complete User Guide - Graham
\layout Itemize

Complete Developers Guide - Neofytos
\layout Itemize

Write final report - Graham
\layout Itemize

Write individual reports - Everyone
\layout Standard

Important dates:
\layout Itemize

Thursday 26th Feb - Hand in final report
\layout Itemize

Friday 27th Feb - Final review meeting with supervisor
\layout Itemize

Monday 1st Mar - Deadline for code completion
\layout Itemize

Wednesday 3rd Mar - Group presentation
\the_end
